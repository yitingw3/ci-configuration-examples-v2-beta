# This is a basic workflow to help you get started with MATLAB Actions
name: Run MATLAB Tests

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "my-job"
 
    # The type of runner that the job will run on
  build:
    strategy:
      matrix:
        platform: [windows-latest]
        release: [latest]
          
    runs-on: ${{matrix.platform}}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
     - name: Check out repository
       uses: actions/checkout@v3
        
     - name: Cache MATLAB
       id: cache-matlab
       uses: actions/cache@v3
       with:
          path: ${{ runner.tool_cache }}/MATLAB
          key: ${{ matrix.platform }}-${{ matrix.release }}

      # Sets up MATLAB on the GitHub Actions runner
     - name: Setup MATLAB
       uses: matlab-actions/setup-matlab@v2-beta
        
      # Run buildfile
     - name: Run buildfile
       uses: matlab-actions/run-build@v1
       with:
          tasks: archive
          
      # upload zip
     - name: Upload file
       uses: actions/upload-artifact@v3
       with:
          name: my-artifact
          path: myZip.zip

      # Runs a set of commands using the runners shell
      #- name: Run tests and generate artifacts
      #  uses: matlab-actions/run-tests@v1
      #  with:
      #    source-folder: src

      # As an alternative to run-tests, you can use run-command to execute a MATLAB script, function, or statement.
      #- name: Run all tests
      #  uses: matlab-actions/run-command@v1
      #  with:
      #    command: addpath('src'); results = runtests('IncludeSubfolders', true); assertSuccess(results);
